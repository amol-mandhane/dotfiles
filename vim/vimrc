" Autoreload .vimrc and .vim/vimrc {{{
autocmd! BufWritePost .vimrc source %
autocmd! BufWritePost vimrc source %
" }}}

" vundle settings {{{
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" }}}

" VIM Plugins {{{
Plugin 'gmarik/Vundle.vim'

" =========== Plugin: Operational plugins ===============
Plugin 'tpope/vim-sensible'
Plugin 'rust-lang/rust.vim'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
" Plugin 'Shougo/unite.vim'
Plugin 'L9'
" Plugin 'FuzzyFinder'
Plugin 'airblade/vim-gitgutter'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimfiler.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/syntastic'
Plugin 'sjl/gundo.vim'
" Plugin 'klen/python-mode'
Plugin 'davidhalter/jedi-vim'
" Plugin 'tell-k/vim-autopep8'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'tpope/vim-surround'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'altercation/vim-colors-solarized'
Plugin 'lervag/vim-latex'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'octol/vim-cpp-enhanced-highlight'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
" Plugin 'honza/vim-snippets'
Plugin 'Raimondi/delimitMate'
" Plugin 'funorpain/vim-cpplint'
Plugin 'c.vim'
Plugin 'mattn/emmet-vim'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
" Plugin 'django.vim'
Plugin 'sukima/xmledit'

Plugin 'fatih/vim-go'
Plugin 'sjl/badwolf'
Plugin 'rking/ag.vim'
Plugin 'szw/vim-tags'

Plugin 'marijnh/tern_for_vim'

Plugin 'gregsexton/MatchTag'
" }}}

" General settings {{{
let mapleader = ","
set timeoutlen=500
set mouse=a
set clipboard=unnamedplus
set autoread               " Autoreload
set hidden                 " set Vim like any other editor (butffers, etc)

set modelines=1
set switchbuf+=usetab,newtab

" }}}

" GUI settings {{{
set number                 " Line numbers
set numberwidth=6
set tw=79                  " width of document (used by gd)
set colorcolumn=80
set list                   " show EOL
set showcmd
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.

syntax on
syntax sync minlines=256

set guifont=Inconsolata-dz\ for\ Powerline\ Medium\ 10
set guioptions -=T

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max

" }}}

" Editor settings {{{
set backspace=indent,eol,start    " Backspace in normal mode
set history=700
set undolevels=700

set nowrap                 " don't automatically wrap on load
set fo-=t                  " don't automatically wrap text when typing
set linebreak              " Wrap lines at convenient points

set scrolloff=2

autocmd BufWritePre * :%s/\s\+$//e      " Trim trailing whitespaces
" }}}

" Indentation {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
filetype plugin on
filetype indent on

" }}}

" Swap backup {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" Searching {{{
set hlsearch
set incsearch
set ignorecase
set smartcase

" }}}

" Color scheme {{{
set t_Co=256

let g:badwolf_darkgutter = 1
let g:badwolf_tabline = 3
colorscheme badwolf


" if has('gui_running')
"    colorscheme solarized
" endif
" }}}

" Highlighting {{{
set cursorline
set cursorcolumn
" }}}

" Cursor settings {{{
au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
" au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape underline"
" au VimEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"

" Cursor automove issue
" au InsertEnter * call cursor(getpos('.')[1], getpos('.')[2]+1)
" }}}

" Vim sessions {{{
"function! MakeSession()
  "let b:sessiondir = $HOME . '/.vim/sessions' . getcwd()
  "if (filewritable(b:sessiondir) != 2)
    "exe 'silent !mkdir -p ' b:sessiondir
    "redraw!
  "endif
  "let b:filename = b:sessiondir . '/session.vim'
  "exe 'mksession! ' . b:filename
"endfunction

"function! LoadSession()
  "let b:sessiondir = $HOME . '/.vim/sessions' . getcwd()
  "let b:sessionfile = b:sessiondir . '/session.vim'
  "if (filereadable(b:sessionfile))
    "exe 'source ' b:sessionfile
  "else
    "echo 'No session loaded.'
  "endif
"endfunction
"au VimEnter * nested :call LoadSession()
"au VimLeave * :call MakeSession()
" }}}

" Shortcuts functions {{{
" General shortcut creation function
function! CreateCommandShortcut(shortcut, command)
    exe 'nnoremap ' . a:shortcut . ' ' . a:command . '<Enter>'
    exe 'inoremap ' . a:shortcut . ' <C-\><C-O>' . a:command . '<Enter>'
    exe 'vnoremap ' . a:shortcut . ' <Esc>' . a:command . '<Enter>'
endfunction

function! CreateShortcut(shortcut, command, ...)
    exe 'nnoremap ' . a:shortcut . ' ' . a:command
    exe 'inoremap ' . a:shortcut . ' <Esc>' . a:command
    if a:0 > 0
        exe 'vnoremap ' . a:shortcut . ' ' . a:command
    else
        exe 'vnoremap ' . a:shortcut . ' <Esc>' . a:command
    end
endfunction
" }}}

" Shortcut Definitions {{{
call CreateCommandShortcut('<C-s>', ':update')     " Ctrl-S save
call CreateCommandShortcut('<C-z>', ':undo')       " Ctrl-Z undo
call CreateCommandShortcut('<C-y>', ':redo')       " Ctrl-Y redo
call CreateCommandShortcut('<C-S-z>', ':redo')     " Ctrl-Shift-Z redo

call CreateCommandShortcut('<C-S-k>', ':dl')       " Ctrl-Shift-K delete line

call CreateCommandShortcut('<C-t>', ':tabnew')      " Ctrl-T new tab
call CreateCommandShortcut('<C-q>', ':q')           " Ctrl-Q close tab

call CreateCommandShortcut('<C-l>', ':nohl')        " Ctrl-L close search
call CreateShortcut('<S-Home>', '<Esc>v^')
call CreateShortcut('<S-End>', '<Esc>v$')

" Decrement number. Increment by Ctrl-A
nnoremap <C-d> <C-x>

vnoremap <C-x> d
vnoremap <C-c> y
vnoremap <C-v> p
nnoremap <C-v> p
inoremap <C-v> <LEFT><C-\><C-o>p
inoremap <C-w> <Esc><C-w>

nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>a :Ag<SPACE>
nnoremap <leader>p :CtrlPTag<CR>
nnoremap <silent> <Leader>tb :TagbarToggle<CR>
nnoremap F :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap T :tag "\b<C-R><C-W>\b"<CR>:cw<CR>

" XML Tag completion
iabbrev <// </<C-X><C-O>
" }}}

" Hard mode {{{
" inoremap <Up> <NOP>
" inoremap <Down> <NOP>
" inoremap <Left> <NOP>
" inoremap <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" }}}

" Plugin Settings {{{

" vim-airline {{{
let g:airline_powerline_fonts=1
set laststatus=2           " Turn on vim-airline
" }}}

" Ag.vim silver-searcher {{{
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif
" }}}

" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    let g:ctrlp_use_caching = 0
endif
let g:ctrlp_max_files=0
" }}}

" VimFiler {{{
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_indentation = 2
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

" }}}

" NerdTree {{{
let NERDTreeShowHidden=0
let g:NERDTreeChDirMode=2

set fillchars+=vert:\ | let g:NERDTreeMirror=1

" nerdtree-tabs {{{
let g:nerdtree_tabs_open_on_console_startup=1
" }}}
" }}}

" vim-indent-guides {{{
" let g:indent_guides_start_level=1
" let g:indent_guides_guide_size=4
let g:indent_guides_enable_on_vim_startup=1

" }}}

" Syntastic {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_cpp_compiler_options = '-std=c++11'

let g:syntastic_javascript_checkers = ['jshint', 'jslint', 'gjslint']
" }}}

" YouCompleteMe {{{
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_register_as_syntastic_checker = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_global_ycm_extra_conf = "/home/amol/dotfiles/vim/.ycm_extra_conf.py"


let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#use_splits_not_buffers = "bottom"

" }}}

" SnipMate {{{
imap <C-i> <Plug>snipMateNextOrTrigger
" }}}

" c.vim {{{
let g:C_UseTool_cmake = 'yes'
let g:C_UseTool_doxygen = 'yes'

" }}}

" Eclim {{{
let g:EclimCompletionMethod = 'omnifunc'
" }}}

" Tern {{{
let tern#is_show_argument_hints_enabled = 1
" }}}
" }}}

" Machine specific settings {{{
source ~/.machine_vimrc
" }}}

" Syntax specific settings {{{
autocmd FileType html source ~/.vim/html.vimrc
autocmd FileType html.ng source ~/.vim/html.vimrc
" }}}

" Startup {{{
" Since we store session, no need to call NERDTree on start.
" autocmd vimenter * NERDTree

"autocmd BufWritePost *.h,*.cpp call Cpplint()
call vundle#end()

" }}}

" vim:foldmethod=marker:foldlevel=0
