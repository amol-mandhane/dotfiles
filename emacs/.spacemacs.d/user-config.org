#+TITLE: My custom configurations with Spacemacs
#+AUTHOR: Amol Mandhane

* Emacs Load Path
Add =~/.spacemacs.d= to Emacs load path.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.spacemacs.d"))
#+END_SRC

* UX Enhancements
** Mac OS
Spaceline looks horrible on Mac OS. This configuration corrects it.

#+BEGIN_SRC emacs-lisp
(setq ns-use-srgb-colorspace nil)
#+END_SRC

** TextMate style newline characters
The newline characters on the fringe provide good visual feedback.

#+BEGIN_SRC emacs-lisp
(setq vi-tilde-fringe-bitmap-array [0 0 0 3 3 255 0 0])
#+END_SRC

** Menu bar
I learn a lot of new things from menu bar. It doesn't consume a lot of screen
space either. Keep it on.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
#+END_SRC

* Editor enhancements
** Newline at EOF
Require newline at end of file.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Disable Additions by =CUSTOM=
Don't pollute my version controlled config. I don't use =custom= for permanent
customizations anyway.

#+BEGIN_SRC emacs-lisp
(setq custom-file "/dev/null")
#+END_SRC

* Helm
** Helm Fuzzy Matching
Enable fuzzy matching everywhere in Helm. Because, why not?

#+BEGIN_SRC emacs-lisp
(setq helm-mode-fuzzy-match t)
(setq helm-completion-in-region-fuzzy-match t)
#+END_SRC

* YouCompleteMe
Set =ycmd= path.

#+BEGIN_SRC emacs-lisp
(require 'ycmd)
(set-variable 'ycmd-server-command '("python" "/opt/ycmd/ycmd"))
#+END_SRC

* =auto-complete= mode
Auto-complete mode and flyspell don't work well together. Following is a
workaround.

#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(ac-flyspell-workaround)
(setq ac-ignore-case 'smart)
#+END_SRC

* Shell configurations
** $EDITOR
Set current emacs as $EDITOR for emacs shell commands.
#+BEGIN_SRC emacs-lisp
(define-key (current-global-map)
  [remap async-shell-command] 'with-editor-async-shell-command)
(define-key (current-global-map)
  [remap shell-command] 'with-editor-shell-command)

(add-hook 'shell-mode-hook 'with-editor-export-editor)
(add-hook 'term-exec-hook 'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)
(add-hook 'shell-mode-hook 'with-editor-export-git-editor)
#+END_SRC

* Semantic mode
** Visual Enhancements
Enable ALL the semantic mode features

#+BEGIN_SRC emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
#+END_SRC

** Better stickyfunc
Enable enhancements to stickyfunc (the line at top which displays function
name).

#+BEGIN_SRC emacs-lisp
(require 'stickyfunc-enhance)
#+END_SRC

** Enable semantic mode
#+BEGIN_SRC emacs-lisp
(semantic-mode 1)
#+END_SRC

* Code Style
** C style
Use Google's C style. This makes it easy for maintaining uniformity between
office and home.

#+BEGIN_SRC emacs-lisp
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC

* Java
Java has big words. Use 100 character limit.
#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook (lambda () (setq fill-column 100)))
#+END_SRC

* Haskell
Using XMonad's custom config file.
#+BEGIN_SRC emacs-lisp
(add-to-list 'flycheck-ghc-search-path (expand-file-name "~/.xmonad/lib"))
#+END_SRC
* Org mode
** Agenda
Set path for Agenda files.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org-plan"))
#+END_SRC

** File extensions
To be able to read org files in google drive, mark "*.org.text" files for
org-mode.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org.text\\'" . org-mode))
#+END_SRC

* Evil mode
** :W is :w
:w and :W typo is very common. Set :W to be save as :w.

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "W" "w")
#+END_SRC

* AST Editing
** Paredit
*** TODO Evaluate paredit
Apparently, paredit has better capabilities but it works well only with
lisp-family languages. Evaluate further.

** Smartparens
Smartparens is awesome. It works well with non-lisp languages (even HTML). Use
more smartparens.

#+BEGIN_SRC emacs-lisp
(require 'smartparens)
#+END_SRC

*** Wrap text function definitions
Surrounding things with delimiters is a frequent tasks. Smartparens comes with a
function which takes the delimiter as argument and wraps with that delimiter.
Here, I created separate functions for each delimiter using smartparens provided
function and a macro.

#+BEGIN_SRC emacs-lisp
(defmacro def-pair (pair)
  `(progn (defun ,(read (concat "sp/wrap-with-"
                           (prin1-to-string (car pair))
                           "s")) (&optional arg)
       (interactive "p")
       (sp-wrap-with-pair ,(cdr pair)))))

(def-pair (paren . "("))
(def-pair (bracket . "["))
(def-pair (brace . "{"))
(def-pair (single-quote . "'"))
(def-pair (double-quote . "\""))
(def-pair (back-quote . "`"))
#+END_SRC

*** Key bindings
Define all the shortcuts for smartparens. Some of these shortcuts override emacs
default shortcuts but perform same functionality.

#+BEGIN_SRC emacs-lisp
  (defun setup-smartparens-keys ()
    (bind-keys :map smartparens-mode-map
               ("C-M-a" . sp-beginning-of-sexp)
               ("C-M-e" . sp-end-of-sexp)
               ("C-<down>" . sp-down-sexp)
               ("C-<up>" . sp-up-sexp)
               ("M-<down>" . sp-backward-down-sexp)
               ("M-<up>" . sp-backward-up-sexp)
               ("C-M-f" . sp-forward-sexp)
               ("C-M-b" . sp-backward-sexp)
               ("C-M-n" . sp-next-sexp)
               ("C-M-p" . sp-previous-sexp)
               ("C-S-f" . sp-forward-symbol)
               ("C-S-b" . sp-backward-symbol)
               ("C-)" . sp-forward-slurp-sexp)
               ("C-}" . sp-forward-barf-sexp)
               ("C-(" . sp-backward-slurp-sexp)
               ("C-{" . sp-backward-barf-sexp)
               ("C-M-t" . sp-transpose-sexp)
               ("C-M-k" . sp-kill-sexp)
               ("C-k" . sp-kill-hybrid-sexp)
               ("M-k" . sp-backward-kill-sexp)
               ("C-M-w" . sp-copy-sexp)
               ("C-M-d" . delete-sexp)
               ("M-<backspace>" . backward-kill-word)
               ("C-<backspace>" . sp-backward-kill-word)
               ([remap sp-backward-kill-word] . backward-kill-word)
               ("M-[" . sp-backward-unwrap-sexp)
               ("M-]" . sp-unwrap-sexp)
               ("C-x C-t" . sp-transpose-hybrid-sexp)
               ("M-(" . sp/wrap-with-parens)
               ("C-c (" . sp/wrap-with-parens)
               ("C-c [" . sp/wrap-with-brackets)
               ("C-c {" . sp/wrap-with-braces)
               ("C-c '" . sp/wrap-with-single-quotes)
               ("C-c \"" . sp/wrap-with-double-quotes)
               ("C-c _" . sp/wrap-with-underscores)
               ("C-c `" . sp/wrap-with-back-quotes)))
  (setup-smartparens-keys)
#+END_SRC
